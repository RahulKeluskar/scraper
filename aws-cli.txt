# Config: Create profiles
aws configure --profile profilename
# Config: Output format
aws configure output format {json, yaml, yaml-stream, text, table}
# Config: Specify your AWS Region
aws configure region (region-name)
# API Gateway: List API Gateway IDs and Names
aws apigateway get-rest-apis | jq -r ‘.items[ ] | .id+” “+.name’
# API Gateway: List API Gateway keys
aws apigateway get-api-keys | jq -r ‘.items[ ] | .id+” “+.name’
# API Gateway: List API Gateway domain names
aws apigateway get-domain-names | jq -r ‘.items[ ] | .domainName+” “+.regionalDomainName’
# API Gateway: List resources for API Gateway
aws apigateway get-resources --rest-api-id ee86b4cde | jq -r ‘.items[ ] | .id+” “+.path’
# API Gateway: Find Lambda for API Gateway resource
aws apigateway get-integration --rest-api-id (id) --resource-id (resource id) --http-method GET | jq -r ‘.uri’
# Amplify: List Amplify apps and source repository
aws amplify list-apps | jq -r ‘.apps[ ] | .name+” “+.defaultDomain+”
# CloudFront: List CloudFront distributions and origins
aws cloudfront list-distributions | jq -r ‘.DistributionList.Items[ ] | .DomainName+” “+.Origins.Items[0].DomainName’
# CloudFront: Create a new invalidation
aws cloudfront create-invalidation [distribution-id]
# CloudWatch: List information about an alarm
aws cloudwatch describe-alarms | jq -r ‘.MetricAlarms[ ] | .AlarmName+” “+.Namespace+” “+.StateValue’
# CloudWatch: Delete an alarm or alarms (you can delete up to 100 at a time)
aws cloudwatch delete-alarms --alarm-names (alarmnames)
# Cognito: List user pool IDs and names
aws cognito-idp list-user-pools --max-results 60 | jq -r ‘.UserPools[ ] | .Id+” “+.Name’
# Cognito: List phone and email of all users
aws cognito-idp list-users --user-pool-id (resource) | jq -r ‘.Users[ ].Attributes | from_entries | .sub + “ “ + .phone_number + “ “ + .email’
# DynamoDB: List DynamoDB tables
aws dynamodb list-tables | jq -r .TableNames [ ]
# DynamoDB: Get all items from a table
aws dynamodb scan --table-name events
# DynamoDB: Get item count from a table
aws dynamodb scan --table-name events --select count | jq .ScannedCount
# DynamoDB: Get item using key
aws dynamodb get-item --table-name events --key ‘{“email””"email@example.com”}}’
# DynamoDB: Get specific fields from an item
aws dynamodb get-item --table-name events --key ‘{“email””"email@example.com"}}’ --attributes-to-get event_type
# DynamoDB: Delete item using key
aws dynamodb delete-item --table-name events --key ‘{“email””email@domain.com”}}’
# EBS: Complete a Snapshot
aws ebs complete-snapshot (snapshot-id)
# EBS: Start a Snapshot
aws ebs start-snapshot --volume-size (value)
# EBS: Get a Snapshot block
--block-token (value)
# EC2: List Instance ID, Type and Name
aws ec2 describe-instances | jq -r '.Reservations[].Instances[]|.InstanceId+" "+.InstanceType+" "+(.Tags[] | select(.Key == "Name").Value)'
# EC2: List Instances with public IP address and Name
aws ec2 describe-instances --query 'Reservations[*].Instances[?not_null(PublicIpAddress)]' | jq -r '.[][]|.PublicIpAddress+" "+(.Tags[]|select(.Key=="Name").Value)'
# EC2: List VPCs and CIDR IP Block
aws ec2 describe-vpcs | jq -r '.Vpcs[]|.VpcId+" "+(.Tags[]|select(.Key=="Name").Value)+" "+.CidrBlock'
# EC2: List Subnets for a VPC
aws ec2 describe-subnets --filter Name=vpc-id,Values=vpc-0d1c1cf4e980ac593 | jq -r '.Subnets[]|.SubnetId+" "+.CidrBlock+" "+(.Tags[]|select(.Key=="Name").Value)'
# EC2: List Security Groups
aws ec2 describe-security-groups | jq -r '.SecurityGroups[]|.GroupId+" "+.GroupName'
# EC2: Print Security Groups for an Instance
aws ec2 describe-instances --instance-ids i-0dae5d4daa47fe4a2 | jq -r '.Reservations[].Instances[].SecurityGroups[]|.GroupId+" "+.GroupName'
# EC2: Edit Security Groups of an Instance
aws ec2 modify-instance-attribute --instance-id i-0dae5d4daa47fe4a2 --groups sg-02a63c67684d8deed sg-0dae5d4daa47fe4a2
# EC2: Print Security Group Rules as FromAddress and ToPort
aws ec2 describe-security-groups --group-ids sg-02a63c67684d8deed | jq -r '.SecurityGroups[].IpPermissions[]|. as $parent|(.IpRanges[].CidrIp+" "+($parent.ToPort|tostring))'
# EC2: Add Rule to Security Group
aws ec2 authorize-security-group-ingress --group-id sg-02a63c67684d8deed --protocol tcp --port 443 --cidr 35.0.0.1
# EC2: Delete Rule from Security Group
aws ec2 revoke-security-group-ingress --group-id sg-02a63c67684d8deed --protocol tcp --port 443 --cidr 35.0.0.1
# EC2: Edit Rules of Security Group
aws ec2 update-security-group-rule-descriptions-ingress --group-id sg-02a63c67684d8deed --ip-permissions 'ToPort=443,IpProtocol=tcp,IpRanges=[{CidrIp=202.171.186.133/32,Description=Home}]'
# EC2: Delete Security Group
aws ec2 delete-security-group --group-id sg-02a63c67684d8deed
# ECS: Create an ECS cluster
aws ecs create-cluster --cluster-name=NAME --generate-cli-skeleton
# ECS: Create an ECS service
aws ecs create-service
# EKS: Create a cluster
aws eks create-cluster --name (cluster name)
# EKS: Delete a cluster
aws eks delete-cluster --name (cluster name)
# EKS: List descriptive information about a cluster
aws eks describe-cluster --name (cluster name)
# EKS: List clusters in your default region
aws eks list-clusters
# EKS: Tag a resource
aws eks tag-resource --resource-arn (resource_ARN) --tags (tags)
# EKS: Untag a resource
aws eks untag-resource --resource-arn (resource_ARN) --tag-keys (tag-key)
# ElastiCache: Get information about a specific cache cluster
aws elasticache describe-cache-clusters | jq -r ‘.CacheClusters[ ] | .CacheNodeType+” “+.CacheClusterId’
# ElastiCache: List ElastiCache replication groups
aws elasticache describe-replication-groups | jq -r ‘.ReplicationGroups [ ] | .ReplicationGroupId+” “+.NodeGroups[ ].PrimaryEndpoint.Address’
# ElastiCache: List ElastiCache snapshots
aws elasticache describe-snapshots | jq -r ‘.Snapshots[ ] | .SnapshotName’
# ElastiCache: Create ElastiCache snapshot
aws elasticache create-snapshot --snapshot-name backend-login-hk-snap-1 --replication-group-id backend-login-hk --cache-cluster-id backend-login-hk
# ElastiCache: Delete ElastiCache snapshot
aws elasticache delete-snapshot --snapshot-name login-snap-1
# ElastiCache: Scale up/down ElastiCache replica
aws elasticache decrease-replica-count --replication-group-id backend-login --apply-immediately
# ELB: List ELB Hostnames
aws elbv2 describe-load-balancers --query ‘LoadBalancers[*].DNSName’ | jq -r ‘to_entries[ ] | .value’
# ELB: List ELB ARNs
aws elbv2 describe-load-balancers | jq -r ‘.LoadBalancers[ ] | .LoadBalancerArn’
# ELB: List of ELB target group ARNs
aws elbv2 describe-target-groups | jq -r ‘.TargetGroups[ ] | .TargetGroupArn’
# ELB: Find instances for a target group
aws elbv2 describe-target-health --target-group-arn arn:aws:elasticloadbalancing:ap-northwest-1:20394823094:targetgroup/wordpress-ph/203942b32a23 | jq -r ‘.TargetHealthDescriptions[ ] | .Target.Id’
# IAM Group: List groups
aws iam list-groups | jq -r .Groups[ ].GroupName
# IAM Group: Add/Delete groups
aws iam create-group --group-name (groupName)
# IAM Group: List policies and ARNs
aws iam list-policies --scope Local | jq -r ‘.Policies[ ]|.PolicyName+” “+.Arn’
# IAM Group: List user/group/roles for a policy
aws iam list-entities-for-policy --policy-arn arn:aws:iam:2308345:policy/example-ReadOnly
# IAM Group: List policies for a group
aws iam list-attached-group-policies --group-name (groupname)
# IAM Group: Add policy to a group
aws iam attach-group-policy --group-name (groupname) --policy-arn arn:aws:iam::aws:policy/exampleReadOnlyAccess
# IAM Group: Add user to a group
aws iam add-user-to-group --group-name (groupname) --user-name (username)
# IAM Group: Remove user from a group
aws iam remove-user-from-group --group-name (groupname) --user-name (username)
# IAM Group: List users in a group
aws iam get-group --group-name (groupname)
# IAM Group: List groups for a user
aws iam list-groups-for-user --user-name (username)
# IAM Group: Attach/detach policy to a group
aws iam detach-group-policy --group-name (groupname) --policy-arn arn:aws:iam::aws:policy/DynamoDBFullAccess
# IAM User: List userId and UserName
aws iam list-users | jq -r ‘.Users[ ]|.UserId+” “+.UserName’
# IAM User: Get single user
aws iam get-user --user-name (username)
# IAM User: Add user
aws iam create-user --user-name (username)
# IAM User: Delete user
aws iam delete-user --user-name (username)
# IAM User: List access keys for user
aws iam list-access-keys --user-name (username) | jq -r .AccessKeyMetadata[ ].AccessKeyId
# IAM User: Delete access key for user
aws iam delete-access-key --user-name (username) --access-key-id (accessKeyID)
# IAM User: Activate/deactivate access key for user
aws iam update-access-key --status Inactive --user-name (username) --access-key-id (access key)
# IAM User: Generate new access key for user
aws iam create-access-key --user-name (username) | jq -r ‘.AccessKey | .AccessKeyId+” “+.SecretAccessKey’
# Lambda: List Lambda functions, runtime, and memory
aws lambda list-functions | jq -r ‘.Functions[ ] | .FunctionName+” “+.Runtime+” “+(.MemorySize|tostring)’

# Lambda: List Lambda layers
aws lambda list-layers | jq -r ‘.Layers[ ] | .LayerName’
# Lambda: List source event for Lambda
aws lambda list-event-source-mappings | jq -r ‘.EventSourceMappings[ ] | .FunctionArn+” “+.EventSourceArn’
# Lambda: Download Lambda code
aws lambda get-function --function-name DynamoToSQS | jq -r .Code.Location
# RDS: List DB clusters
aws rds describe-db-clusters | jq -r ‘.DBClusters[ ] | .DBClusterIdentifier+” “+.Endpoint’
# RDS: List DB instances
aws rds describe-db-instances | jq -r ‘.DBInstances[ ] | .DBInstanceIdentifier+” “+.DBInstanceClass+” “+.Endpoint.Address’
# RDS: Take DB Instance Snapshot
aws rds describe-db-snapshots --db-snapshot-identifier snapshot-1 --db-instance-identifier general
# RDS: Take DB cluster snapshot
aws rds create-db-cluster-snapshot --db-cluster-snapshot-identifier
# Route53: Create hosted zone
aws route53 create-hosted-zone --name exampledomain.com
# Route53: Delete hosted zone
aws route53 delete-hosted-zone --id example
# Route53: Get hosted zone
aws route53 get-hosted-zone --id example
# Route53: List hosted zones
aws route53 list-hosted-zones
# Route53: Create a record set

# Route53: To do this you’ll first need to create a JSON file with a list of change items in the body and use the CREATE action. For example the JSON file would look like this.
{
     "Comment": "CREATE/DELETE/UPSERT a record",
     "Changes": [{
     "Action": "CREATE",
          "ResourceRecordSet":{
               "Name": "a.example.com",
               "Type": "A",
               "TTL": 300,
          "ResourceRecords":[{"Value":"4.4.4.4"}]
}}]
}

# Route53: Once you have a JSON file with the correct information like above you will be able to enter the command
aws route53 change-resource-record-sets --hosted-zone-id (zone-id) --change-batch file://exampleabove.json
# Route53: Update a record set

# Route53: To do this you’ll first need to create a JSON file with a list of change items in the body and use the UPSERT action. This will either create a new record set with the specified value, or updates a record set if it already exists. For example the JSON file would look like this.
{
     "Comment": "CREATE/DELETE/UPSERT a record",
     "Changes": [{
     "Action": "UPSERT",
          "ResourceRecordSet":{
               "Name": "a.example.com",
               "Type": "A",
               "TTL": 300,
          "ResourceRecords": [{"Value":"4.4.4.4"}]
}}]
}

# Route53: Delete a record set

# Route53: To do this you’ll first need to create a JSON file with a list of the record set values you want to delete in the body and use the DELETE action. For example the JSON file would look like this.
{
     "Comment": "CREATE/DELETE/UPSERT a record",
     "Changes": [{
     "Action": "DELETE",
          "ResourceRecordSet": {
               "Name": "a.example.com",
               "Type": "A",
               "TTL": 300,
          "ResourceRecords": [{"Value":"4.4.4.4"}]
}}]
}

# Route53: Once you have a JSON file with the correct information like above you will be able to enter the following command.
aws route53 change-resource-record-sets --hosted-zone-id (zone-id) --change-batch file://exampleabove.json
# S3: List Buckets
aws s3 ls
# S3: List files in a Bucket
aws s3 ls s3://mybucket
# S3: Create Bucket

aws s3 mb s3://bucket-name
make_bucket: bucket-name

# S3: Delete Bucket
aws s3 rb s3://bucket-name --force
# S3: Download S3 object to local
aws s3 cp s3://bucket-name
download: ./backup.tar from s3://bucket-name/backup.tar

# S3: Upload local file as S3 object
aws s3 cp backup.tar s3://bucket-name
upload: ./backup.tar to s3://bucket-name/backup.tar

# S3: Delete S3 object
aws s3 rm s3://bucket-name/secret-file.gz .
delete: s3://bucket-name/secret-file.gz

# S3: Download bucket to local
aws s3 sync s3://bucket-name/ /media/pasport-ultra/backup
# S3: Upload local directory to bucket

aws s3 sync (directory) s3://bucket-name/

# S3: Share S3 object without public access

aws s3 presign s3://bucket-name/file-name --expires-in (time value)
https://bucket-name.s3.amazonaws.com/file-name.pdf?AWSAccessKeyId=(key)&amp;Expires=(value)&amp;Signature=(value)

# SNS: List SNS topics

aws sns list-topics | jq -r ‘.Topics[ ] | .TopicArn’

# SNS: List SNS topic and related subscriptions

aws sns list-subscriptions | jq -r ‘.Subscriptions[ ] | .TopicArn+” “+.Protocol+” “+.Endpoint’

# SNS: Publish to SNS topic

aws sns publish --topic-arn arn:aws:sns:ap-southeast-1:232398:backend-api-monitoring

# SQS: List queues
aws sqs list-queues | jq -r ‘.QueueUrls[ ]’
# SQS: Create queue
aws sqs create-queue --queue-name public-events.fifo | jq -r .queueURL
# SQS: Send message
aws sqs send-message --queue-url (url) --message-body (message)
# SQS: Receive message
aws sqs receive-message --queue-url (url) | jq -r ‘.Messages[ ] | .Body’
# SQS: Delete message
aws sqs delete-message --queue url (url) --receipt-handle (receipt handle)
# SQS: Purge queue
aws sqs purge-queue --queue-url (url)
# SQS: Delete queue
aws sqs delete-queue --queue-url (url)
# list all trails
aws cloudtrail describe-trails

# list all S3 buckets
aws s3 ls

# cloudtrail: create a new trail
aws cloudtrail create-subscription \
    --name awslog \
    --s3-new-bucket awslog2016

# cloudtrail: list the names of all trails
aws cloudtrail describe-trails --output text | cut -f 8

# cloudtrail: get the status of a trail
aws cloudtrail get-trail-status \
    --name awslog

# cloudtrail: delete a trail
aws cloudtrail delete-trail \
    --name awslog

# cloudtrail: remove a trail
aws cloudtrail delete-trail \
    --name awslog

# remove a cloudtrail
aws cloudtrail delete-trail \
    --name awslog

# delete a cloudtrail
aws cloudtrail delete-trail \
    --name awslog

# cloudtrail: delete the S3 bucket of a trail
aws s3 rb s3://awslog2016 --force\

# cloudtrail: remove the S3 bucket of a trail
aws s3 rb s3://awslog2016 --force

# delete the S3 bucket of a cloudtrail
aws s3 rb s3://awslog2016 --force

# remove the S3 bucket of a cloudtrail
aws s3 rb s3://awslog2016 --force

# cloudtrail: add tags to a trail, up to 10 tags
aws cloudtrail add-tags \
    --resource-id awslog \
    --tags-list "Key=log-type,Value=all"

# addition of upto 10 tags to a cloudtrail
aws cloudtrail add-tags \
    --resource-id awslog \
    --tags-list "Key=log-type,Value=all"

# addition of tags to a cloudtrail
aws cloudtrail add-tags \
    --resource-id awslog \
    --tags-list "Key=log-type,Value=all"


# cloudtrail: list the tags of a trail
aws cloudtrail list-tags \
    --resource-id-list

# list the tags of a cloudtrail
aws cloudtrail list-tags \
    --resource-id-list

# cloudtrail: list cloudtrail tags
aws cloudtrail list-tags \
    --resource-id-list

# list cloudtrail tags
aws cloudtrail list-tags \
    --resource-id-list

# listing of cloudtrail tags
aws cloudtrail list-tags \
    --resource-id-list

# cloudtrail: remove a tag from a trail
aws cloudtrail remove-tags \
    --resource-id awslog \
    --tags-list "Key=log-type,Value=all"

# remove tag from cloudtrail
aws cloudtrail remove-tags \
    --resource-id awslog \
    --tags-list "Key=log-type,Value=all"

# iam: list all user's info
aws iam list-users

# iam: list user's iam info
aws iam list-users

# iam: list all user's usernames
aws iam list-users --output text | cut -f 6

# iam: list usernames of all users
aws iam list-users --output text | cut -f 6


# iam: list current user's info
aws iam get-user

# iam: list info of current user
aws iam get-user

# list info of user who is currently logged in
aws iam get-user

# iam: list current user's access keys
aws iam list-access-keys

# iam: list access keys of current user
aws iam list-access-keys

# iam: create new user
aws iam create-user \
    --user-name aws-admin2

# iam: create multiple new users, from a file
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam create-user \
        --user-name $userName
done


# iam: use file to create multiple users
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam create-user \
        --user-name $userName
done

# iam: list all users
aws iam list-users --no-paginate

# iam: list of all users
aws iam list-users --no-paginate

# iam: listing of all users
aws iam list-users --no-paginate

# iam: get a specific user's info
aws iam get-user \
    --user-name aws-admin2

# iam: get info of a specific user
aws iam get-user \
    --user-name aws-admin2

# iam: delete one user
aws iam delete-user \
    --user-name aws-admin2

# iam: deletion of  one user
aws iam delete-user \
    --user-name aws-admin2

# iam: removal of  one user
aws iam delete-user \
    --user-name aws-admin2

# iam: remove user
aws iam delete-user \
    --user-name aws-admin2

# iam: delete all users
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done


# iam: delete every user
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# iam: remove every user
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# iam: remove all users
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# list all user's info
aws iam list-users

# list user's iam info
aws iam list-users

# list all user's usernames
aws iam list-users --output text | cut -f 6

# list usernames of all users
aws iam list-users --output text | cut -f 6


# list current user's info
aws iam get-user

# list info of current user
aws iam get-user

# list info of user who is currently logged in
aws iam get-user

# list current user's access keys
aws iam list-access-keys

# list access keys of current user
aws iam list-access-keys

# create new user
aws iam create-user \
    --user-name aws-admin2

# create multiple new users, from a file
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam create-user \
        --user-name $userName
done


# use file to create multiple users
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam create-user \
        --user-name $userName
done

# list all users
aws iam list-users --no-paginate

# list of all users
aws iam list-users --no-paginate

# listing of all users
aws iam list-users --no-paginate

# get a specific user's info
aws iam get-user \
    --user-name aws-admin2

# get info of a specific user
aws iam get-user \
    --user-name aws-admin2

# delete one user
aws iam delete-user \
    --user-name aws-admin2

# deletion of  one user
aws iam delete-user \
    --user-name aws-admin2

# removal of  one user
aws iam delete-user \
    --user-name aws-admin2

# remove user
aws iam delete-user \
    --user-name aws-admin2

# delete all users
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done


# delete every user
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# remove every user
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# remove all users
# allUsers=$(aws iam list-users --output text | cut -f 6);
allUsers=$(cat ./user-names.txt)
for userName in $allUsers; do
    aws iam delete-user \
        --user-name $userName
done

# password-policy: list policy
aws iam get-account-password-policy

# get password policy
aws iam get-account-password-policy

# list password policy
aws iam get-account-password-policy

# password-policy: set policy
aws iam update-account-password-policy \
	--minimum-password-length 12 \
	--require-symbols \
	--require-numbers \
	--require-uppercase-characters \
	--require-lowercase-characters \
	--allow-users-to-change-password

# set password policy
aws iam update-account-password-policy \
	--minimum-password-length 12 \
	--require-symbols \
	--require-numbers \
	--require-uppercase-characters \
	--require-lowercase-characters \
	--allow-users-to-change-password

# password-policy: delete policy
aws iam delete-account-password-policy

# delete password policy
aws iam delete-account-password-policy

# remove password policy
aws iam delete-account-password-policy

# access-keys: list all access keys
aws iam list-access-keys

# list all access keys
aws iam list-access-keys

# access-keys: list access keys of a specific user
aws iam list-access-keys \
    --user-name aws-admin2

# list specific users access keys
aws iam list-access-keys \
    --user-name aws-admin2

# access-keys: create a new access key
aws iam create-access-key \
    --user-name aws-admin2 \
    --output text | tee aws-admin2.txt

# create a new access key
aws iam create-access-key \
    --user-name aws-admin2 \
    --output text | tee aws-admin2.txt

# generate a new access key
aws iam create-access-key \
    --user-name aws-admin2 \
    --output text | tee aws-admin2.txt

# access-keys: list last access time of an access key
aws iam get-access-key-last-used \
    --access-key-id AKIAINA6AJZY4EXAMPLE

# list last access time of an access key
aws iam get-access-key-last-used \
    --access-key-id AKIAINA6AJZY4EXAMPLE\

# get last access time of an access key
aws iam get-access-key-last-used \
    --access-key-id AKIAINA6AJZY4EXAMPLE

# show last access time of an access key
aws iam get-access-key-last-used \
    --access-key-id AKIAINA6AJZY4EXAMPLE

# access-keys: deactivate an acccess key
aws iam update-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --status Inactive \
    --user-name aws-admin2

# deactivate an acccess key
aws iam update-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --status Inactive \
    --user-name aws-admin2

# deactivation of acccess key
aws iam update-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --status Inactive \
    --user-name aws-admin2

# access key deactivation
aws iam update-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --status Inactive \
    --user-name aws-admin2


# access-keys: delete an access key
aws iam delete-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --user-name aws-admin2

# remove an access key
aws iam delete-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --user-name aws-admin2

# removal of an access key
aws iam delete-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --user-name aws-admin2

# deletion of an access key
aws iam delete-access-key \
    --access-key-id AKIAI44QH8DHBEXAMPLE \
    --user-name aws-admin2

# Groups, Policies, Managed Policies: list all groups
aws iam list-groups

# list all groups
aws iam list-groups

# show all groups
aws iam list-groups

# get all groups
aws iam list-groups

# Groups, Policies, Managed Policies create a group
aws iam create-group --group-name FullAdmins

# create a group
aws iam create-group --group-name FullAdmins

# Groups, Policies, Managed Policies delete a group
aws iam delete-group \
    --group-name FullAdmins

# delete a group
aws iam delete-group \
    --group-name FullAdmins

# remove a group
aws iam delete-group \
    --group-name FullAdmins

# Groups, Policies, Managed Policies list all policies
aws iam list-policies

#list all policies
aws iam list-policies

#get all policies
aws iam list-policies

#show all policies
aws iam list-policies

# Groups, Policies, Managed Policies get a specific policy
aws iam get-policy \
    --policy-arn <value>

# get a specific policy
aws iam get-policy \
    --policy-arn <value>

# get a policy
aws iam get-policy \
    --policy-arn <value>

# get a certain policy
aws iam get-policy \
    --policy-arn <value>

# Groups, Policies, Managed Policies: list all users, groups, and roles, for a given policy
aws iam list-entities-for-policy \
    --policy-arn <value>

# list all users, groups, and roles, for a given policy
aws iam list-entities-for-policy \
    --policy-arn <value>

#list the users, groups, and roles, of given policy
aws iam list-entities-for-policy \
    --policy-arn <value>

#list the policy's users, groups, and roles
aws iam list-entities-for-policy \
    --policy-arn <value>

#get the policy's users, groups, and roles
aws iam list-entities-for-policy \
    --policy-arn <value>

#show the policy's users, groups, and roles
aws iam list-entities-for-policy \
    --policy-arn <value>

# Groups, Policies, Managed Policies: list policies, for a given group
aws iam list-attached-group-policies \
    --group-name FullAdmins

#list policies, for a given group
aws iam list-attached-group-policies \
    --group-name FullAdmins

#show policies, for a given group
aws iam list-attached-group-policies \
    --group-name FullAdmins

#get policies, for a given group
aws iam list-attached-group-policies \
    --group-name FullAdmins

# Groups, Policies, Managed Policies: add a policy to a group
aws iam attach-group-policy \
    --group-name FullAdmins \
    --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

# add a policy to a group
aws iam attach-group-policy \
    --group-name FullAdmins \
    --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

# Groups, Policies, Managed Policies: add a user to a group
aws iam add-user-to-group \
    --group-name FullAdmins \
    --user-name aws-admin2

# add a user to a group
aws iam add-user-to-group \
    --group-name FullAdmins \
    --user-name aws-admin2

# add user to group
aws iam add-user-to-group \
    --group-name FullAdmins \
    --user-name aws-admin2

# Groups, Policies, Managed Policies: list users, for a given group
aws iam get-group \
    --group-name FullAdmins

#list users, for a given group
aws iam get-group \
    --group-name FullAdmins

#show users, for a given group
aws iam get-group \
    --group-name FullAdmins

#get users, for a given group
aws iam get-group \
    --group-name FullAdmins

# Groups, Policies, Managed Policies: list groups, for a given user
aws iam list-groups-for-user \
    --user-name aws-admin2

# list groups, for a given user
aws iam list-groups-for-user \
    --user-name aws-admin2

# get groups, for a given user
aws iam list-groups-for-user \
    --user-name aws-admin2

# show groups, for a given user
aws iam list-groups-for-user \
    --user-name aws-admin2

# list user's groups
aws iam list-groups-for-user \
    --user-name aws-admin2

# Groups, Policies, Managed Policies: remove a user from a group
aws iam remove-user-from-group \
    --group-name FullAdmins \
    --user-name aws-admin2

#remove a user from a group
aws iam remove-user-from-group \
    --group-name FullAdmins \
    --user-name aws-admin2

# Groups, Policies, Managed Policies: remove a policy from a group
aws iam detach-group-policy \
    --group-name FullAdmins \
    --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

# remove a policy from a group
aws iam detach-group-policy \
    --group-name FullAdmins \
    --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

# detach a policy from a group
aws iam detach-group-policy \
    --group-name FullAdmins \
    --policy-arn arn:aws:iam::aws:policy/AdministratorAccess

# Groups, Policies, Managed Policies: delete a group
aws iam delete-group \
    --group-name FullAdmins

# delete a group
aws iam delete-group \
    --group-name FullAdmins

# list existing S3 buckets
aws s3 ls

# list S3 buckets
aws s3 ls

# create a bucket name, using the current date timestamp
bucket_name=test_$(date "+%Y-%m-%d_%H-%M-%S")
echo $bucket_name

# generate a bucket name, using the current date timestamp
bucket_name=test_$(date "+%Y-%m-%d_%H-%M-%S")
echo $bucket_name

# create a bucket name, using timestamp
bucket_name=test_$(date "+%Y-%m-%d_%H-%M-%S")
echo $bucket_name

# generate a bucket name, using timestamp
bucket_name=test_$(date "+%Y-%m-%d_%H-%M-%S")
echo $bucket_name

# create a public facing bucket
aws s3api create-bucket --acl "public-read-write" --bucket $bucket_name

# create a public bucket
aws s3api create-bucket --acl "public-read-write" --bucket $bucket_name

# create s3 bucket for public cloud
aws s3api create-bucket --acl "public-read-write" --bucket $bucket_name

# verify bucket was created
aws s3 ls | grep $bucket_name

# verify if s3 bucket was created
aws s3 ls | grep $bucket_name

# check if s3 bucket was created
aws s3 ls | grep $bucket_name

# check for public facing s3 buckets
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo {} ; fi'

# check for s3 buckets on public cloud
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo {} ; fi'

# check for public facing s3 buckets, updated them to be private
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then aws s3api put-bucket-acl --acl "private" --bucket {} ; fi'

# check for public facing s3 buckets, and make them private
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then aws s3api put-bucket-acl --acl "private" --bucket {} ; fi'


# check for public facing s3 buckets
aws s3api list-buckets --query 'Buckets[*].[Name]' --output text | xargs -I {} bash -c 'if [[ $(aws s3api get-bucket-acl --bucket {} --query '"'"'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers` && Permission==`READ`]'"'"' --output text) ]]; then echo {} ; fi'

# keypairs : list all keypairs
# http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-key-pairs.html
aws ec2 describe-key-pairs

# list all keypairs
aws ec2 describe-key-pairs

# show all keypairs
aws ec2 describe-key-pairs

# get all keypairs
aws ec2 describe-key-pairs

# keypairs : create a keypair
# http://docs.aws.amazon.com/cli/latest/reference/ec2/create-key-pair.html
aws ec2 create-key-pair \
    --key-name <value> --output text

# create a keypair
aws ec2 create-key-pair \
    --key-name <value> --output text

# generate a keypair
aws ec2 create-key-pair \
    --key-name <value> --output text

# keypairs : create a new local private / public keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096

#create a new local private / public keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096

#generate a new local private / public keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096

#create a new local keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096

#generate a new local keypair, using RSA 4096-bit
ssh-keygen -t rsa -b 4096

# keypairs : import an existing keypair
aws ec2 import-key-pair \
    --key-name keyname_test \
    --public-key-material file:///home/apollo/id_rsa.pub

#import keypair
aws ec2 import-key-pair \
    --key-name keyname_test \
    --public-key-material file:///home/apollo/id_rsa.pub

#import an existing keypair
aws ec2 import-key-pair \
    --key-name keyname_test \
    --public-key-material file:///home/apollo/id_rsa.pub

# keypairs : delete a keypair
# http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-key-pair.html
aws ec2 delete-key-pair \
    --key-name <value>

# remove a keypair
aws ec2 delete-key-pair \
    --key-name <value>

# delete a keypair
aws ec2 delete-key-pair \
    --key-name <value>

# security groups: list all security groups
aws ec2 describe-security-groups

# list all security groups
aws ec2 describe-security-groups

# show all security groups
aws ec2 describe-security-groups

# get all security groups
aws ec2 describe-security-groups

#  security groups: create a security group
aws ec2 create-security-group \
    --vpc-id vpc-1a2b3c4d \
    --group-name web-access \
    --description "web access"

# create a security group
aws ec2 create-security-group \
    --vpc-id vpc-1a2b3c4d \
    --group-name web-access \
    --description "web access"

# generate a security group
aws ec2 create-security-group \
    --vpc-id vpc-1a2b3c4d \
    --group-name web-access \
    --description "web access"


#  security groups: list details about a securty group
aws ec2 describe-security-groups \
    --group-id sg-0000000

# list details about a security group
aws ec2 describe-security-groups \
    --group-id sg-0000000

# list  security group details
aws ec2 describe-security-groups \
    --group-id sg-0000000

# get details about a security group
aws ec2 describe-security-groups \
    --group-id sg-0000000

# get  security group details
aws ec2 describe-security-groups \
    --group-id sg-0000000

# show details about a security group
aws ec2 describe-security-groups \
    --group-id sg-0000000

# show security group details
aws ec2 describe-security-groups \
    --group-id sg-0000000

#  security groups: open port 80, for everyone
aws ec2 authorize-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/24

# open port 80, for everyone
aws ec2 authorize-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/24

#  security groups: get my public ip
my_ip=$(dig +short myip.opendns.com @resolver1.opendns.com);
echo $my_ip

# get my public ip
my_ip=$(dig +short myip.opendns.com @resolver1.opendns.com);
echo $my_ip

#  security groups: open port 22, just for my ip
aws ec2 authorize-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr $my_ip/24

# open port 22, just for my ip
aws ec2 authorize-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr $my_ip/24

#  security groups: remove a firewall rule from a group
aws ec2 revoke-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/24

# remove a firewall rule from a group
aws ec2 revoke-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/24

# delete a firewall rule from a group
aws ec2 revoke-security-group-ingress \
    --group-id sg-0000000 \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/24

#  security groups: delete a security group
aws ec2 delete-security-group \
    --group-id sg-00000000

# remove a security group
aws ec2 delete-security-group \
    --group-id sg-00000000

# removal of a security group
aws ec2 delete-security-group \
    --group-id sg-00000000

# list all private AMI's, ImageId and Name tags
aws ec2 describe-images --filter "Name=is-public,Values=false" \
    --query 'Images[].[ImageId, Name]' \
    --output text | sort -k2

# delete an AMI, by ImageId
aws ec2 deregister-image --image-id ami-00000000

# remove an AMI, by ImageId
aws ec2 deregister-image --image-id ami-00000000

# list all instances (running, and not running)
aws ec2 describe-instances

# get all instances (running, and not running)
aws ec2 describe-instances


# show all instances (running, and not running)
aws ec2 describe-instances

# list all instances
aws ec2 describe-instances

# get all instances
aws ec2 describe-instances

# show all instances
aws ec2 describe-instances

# list all instances running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# list all  running instances
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# list all  instances that are running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running


# get all instances running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# get all  running instances
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# get all  instances that are running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running


# show all instances running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

#show all  running instances
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# show all  instances that are running
aws ec2 describe-instances --filters Name=instance-state-name,Values=running

# create a new instance
aws ec2 run-instances \
    --image-id ami-f0e7d19a \
    --instance-type t2.micro \
    --security-group-ids sg-00000000 \
    --dry-run

# create a new ec2 instance
aws ec2 run-instances \
    --image-id ami-f0e7d19a \
    --instance-type t2.micro \
    --security-group-ids sg-00000000 \
    --dry-run


# stop an instance
aws ec2 terminate-instances \
    --instance-ids <instance_id>

# stop an ec2 instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/terminate-instances.html
aws ec2 terminate-instances \
    --instance-ids <instance_id>

# list status of all instances
aws ec2 describe-instance-status

# get status of all instances
aws ec2 describe-instance-status

# show status of all instances
aws ec2 describe-instance-status

# list status of a specific instance
aws ec2 describe-instance-status \
    --instance-ids <instance_id>

# get status of a specific instance
aws ec2 describe-instance-status \
    --instance-ids <instance_id>

# show status of a specific instance
aws ec2 describe-instance-status \
    --instance-ids <instance_id>

# list all running instance, Name tag and Public IP Address
aws ec2 describe-instances \
  --filters Name=instance-state-name,Values=running \
  --query 'Reservations[].Instances[].[PublicIpAddress, Tags[?Key==`Name`].Value | [0] ]' \
  --output text | sort -k2

# show all running instance, Name tag and Public IP Address
aws ec2 describe-instances \
  --filters Name=instance-state-name,Values=running \
  --query 'Reservations[].Instances[].[PublicIpAddress, Tags[?Key==`Name`].Value | [0] ]' \
  --output text | sort -k2

# get all running instance, Name tag and Public IP Address
aws ec2 describe-instances \
  --filters Name=instance-state-name,Values=running \
  --query 'Reservations[].Instances[].[PublicIpAddress, Tags[?Key==`Name`].Value | [0] ]' \
  --output text | sort -k2

# list the tags of an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
aws ec2 describe-tags

# get the tags of an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
aws ec2 describe-tags

# show the tags of an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
aws ec2 describe-tags

# add a tag to an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/create-tags.html
aws ec2 create-tags \
    --resources "ami-1a2b3c4d" \
    --tags Key=name,Value=debian

# delete a tag on an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-tags.html
aws ec2 delete-tags \
    --resources "ami-1a2b3c4d" \
    --tags Key=Name,Value=

# remove a tag on an instance
# http://docs.aws.amazon.com/cli/latest/reference/ec2/delete-tags.html
aws ec2 delete-tags \
    --resources "ami-1a2b3c4d" \
    --tags Key=Name,Value=
